buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'com.avast.gradle', name: 'gradle-docker-compose-plugin', version: '0.8.8'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'docker-compose'
apply plugin: 'jacoco'

group = 'com.reactive.es.ddd'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: "org.springframework.boot:spring-boot-starter-test", module: "junit:junit"
}

test {
    useJUnitPlatform()
}

bootJar {
    baseName = 'reactive-es-demo'
    version = ''
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    compileOnly('org.projectlombok:lombok')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.1.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.1.0')
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.23.0'
    testCompile group: 'org.testcontainers', name: 'testcontainers', version: '1.8.0'
    testCompile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.9.1'
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        println "failed"
    } else {
        println "done"
    }
}

dockerCompose {
    useComposeFiles = ['docker/docker-compose.yml']
    forceRecreate = true
}

composeDown {
    doLast {
        println("Removing old docker image")
        exec {
            executable "sh"
            args "-c", "docker rmi -f reactive_es_demo"
        }
    }
}

composeUp.dependsOn("build")
composeUp.dependsOn("composeDown")

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
